package com.example;

import java.io.File;
import java.io.IOException;
import java.util.Scanner;

public class DidaRideMultiLangRunner {
    public static void main(String[] args) throws IOException, InterruptedException {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Select language to run (perl/lua/kotlin): ");
        String lang = scanner.nextLine().trim().toLowerCase();

        System.out.print("Enter the script/project filename (relative to language folder): ");
        String filename = scanner.nextLine().trim();

        String command = "";
        String folder = "";

        switch (lang) {
            case "perl":
                command = "perl";
                folder = "perl_projects";
                break;
            case "lua":
                command = "lua";
                folder = "lua_projects";
                break;
            case "kotlin":
                command = "kotlinc";
                folder = "kotlin_projects";
                break;
            default:
                System.out.println("Unsupported language.");
                return;
        }

        File file = new File(folder + "/" + filename);
        if (!file.exists()) {
            System.out.println("File not found: " + file.getPath());
            return;
        }

        ProcessBuilder builder;
        if (lang.equals("kotlin")) {
            // for Kotlin, compile then run the jar
            String jarName = filename.replaceAll("\\.kt$", ".jar");
            builder = new ProcessBuilder("kotlinc", file.getPath(), "-include-runtime", "-d", folder + "/" + jarName);
            builder.inheritIO();
            Process compileProcess = builder.start();
            if (compileProcess.waitFor() != 0) {
                System.out.println("Kotlin compilation failed.");
                return;
            }
            builder = new ProcessBuilder("java", "-jar", folder + "/" + jarName);
        } else {
            builder = new ProcessBuilder(command, file.getPath());
        }

        builder.inheritIO();
        Process process = builder.start();
        process.waitFor();
    }
}
